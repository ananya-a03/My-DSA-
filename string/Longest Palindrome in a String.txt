Longest Palindrome in a String

Given a string S, find the longest palindromic substring in S. Substring of string S: S[ i . . . . j ] where 0 ≤ i ≤ j < len(S). Palindrome string: A string that reads the same backward. More formally, S is a palindrome if reverse(S) = S. In case of conflict, return the substring which occurs first ( with the least starting index).

Example 1:

Input:
S = "aaaabbaa"
Output: aabbaa
Explanation: The longest Palindromic
substring is "aabbaa".
Example 2:

Input: 
S = "abc"
Output: a
Explanation: "a", "b" and "c" are the 
longest palindromes with same length.
The result is the one with the least
starting index.
Your Task:
You don't need to read input or print anything. Your task is to complete the function longestPalin() which takes the string S as input and returns the longest palindromic substring of S.

Expected Time Complexity: O(|S|2).
Expected Auxiliary Space: O(1).

Code:

class Solution {
  public:
  
    string expand(string s, int left, int right)
    {
        while(left>=0 && right<s.size() && s[left]==s[right]) 
        {
            left-- ;
            right++ ;
        }
        return s.substr(left+1, right-left-1) ;
    }

    string longestPalin (string S) {
        // code here
        
        string ans ;
        for(int i=0; i<S.size(); i++) 
        {
            string odd = expand(S, i, i) ;
            string even = expand(S, i, i+1) ;
            
            if(ans.size()<odd.size()) ans = odd ;
            
            if(ans.size()<even.size()) ans = even ;
            
        }
        return ans ;
    }
};