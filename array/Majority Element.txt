Majority Element

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than âŒŠn / 2âŒ‹ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        unordered_map<int, int> umap;
        
        for(int i = 0; i < n; i++){
            umap[nums[i]]++;
        }
        
        for(auto x: umap){
            if(x.second > n/2){
                return x.first;
            }
        }
        return 0;
    }
};

Approach 2( Moore's Voting Algorithm )
Here, we've enlisted the help of two reliable variables: "count," keeping track of occurrences, and "element," our potential answer holder. ðŸ“Š

While scanning through the array, if we chance upon an element with a count of 0, we seize the opportunity and declare it our answer. ðŸŽ‰ Subsequently, encountering the same element again, we jubilantly increase its count; otherwise, we calmly decrease it. ðŸ”„

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count = 0;
        int candidate = 0;
        
        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }
            
            if (num == candidate) {
                count++;
            } else {
                count--;
            }
        }
        
        return candidate;
    }
};